{"code":200,
"data":{
  "title":"Grunt（二）- 前端框架",
  "id":"20161003",
  "author":"宅女",
  "time":"2016-10-03",
  "type":"3",
  "body":"<div class='items_1'><p>小伙伴们晚上好~有木有hin想我呀~今天的推送有些晚了，因为......我在家瘫了一整天......</p><p><img src='../image/20161003/1.jpg'/></p><p>下面奉上今天的内容~</p><p>接上期Gurnt（一）的内容~</p><h4><span>7</span>Grunt插件介绍</h4><p>所有插件的安装方法：进入项目所在文件夹，启动命令行工具，输入</p><p>npm install grunt-contrib-<module> --save-dev</p><p>常用插件：<br/>uglify：压缩javascript代码<br/>cssmin：压缩CSS文件<br/>jshint：检查Js语法<br/>concat：合并多个文件的代码到一个文件中<br/>imagemin：无损压缩图片<br/>watch：实时监控文件变化、调用相应的任务重新执行；<br/>connect : 实现页面的实时刷新</p><h4><span>8</span>使用uglify插件（压缩javascript代码）</h4><p>安装uglify插件的方式</p><p><img src='../image/20161003/2.png'/></p><p>安装完成之后，你会看到package.json中“devDependencies”节点的变化，以及“node_modules”文件夹里的变化。</p><p><img src='../image/20161003/3.png'/></p><p>现在需要在Gruntfile.js 做配置。</p><p>在现有的“src”文件夹中新建一个“test.js”，并随便写一些代码。</p><p><img src='../image/20161003/4.png'></p><p>测试文件建立好了。我们接下来就要把这个js文件进行压缩。</p><p>第一步，在grunt.initConfig方法中配置 uglify 的配置参数。如下图：</p><p><img src='../image/20161003/5.png'/></p><p>上图中，对uglify的配置有两项。</p><p>“options”中规定允许生成的压缩文件带banner，即在生成的压缩文件第一行加一句话说明。注意，其中使用到了pkg获取package.json的内容。</p><p>“build”中配置了源文件和目标文件。规定了要压缩的文件，压缩之后生成的文件。我们这里将目标文件的文件名通过pkg的name和version来命名。</p><p>最重要的是对文件版本的管理，你只需要在package.json中修改即可，grunt会自动根据最新的版本号生成相应版本的文件。你不用手动去修改文件的文件名。</p><p>最后，这里只是对“options”和“build”的基本应用，还有许多中使用方式，可以去官网查阅。</p><p>第二步，在 grunt.initConfig 方法之后，要让grunt去加载这一个插件。</p><p><img src='../image/20161003/6.png'/></p><p>第三步，在grunt命令执行时，执行uglify插件</p><p><img src='../image/20161003/7.png'/></p><p>接下来我们去试验一下。在控制台中运行grunt命令grunt</p><p><img src='../image/20161003/8.png'/></p><p>生成了一个压缩后的js文件　　</p><p><img src='../image/20161003/9.png'/></p><p><img src='../image/20161003/10.png'/></p><p>Javascript使用uglify压缩，css可使用cssmin插件压缩。安装、配置方法一样的，不再赘述。</p><h4><span>9</span>使用jshint插件（检查javascript语法错误）</h4><p><img src='../image/20161003/11.png'/></p><p>jshint的安装和配置</p><p>第一步，在grunt.initConfig方法中配置jshint。</p><p><img src='../image/20161003/12.png'/></p><p>“build”中描述了jshint要检查哪些js文档的语法。“options”中描述了要通过怎么的规则检查语法，这些规则的描述文件就保存在网站根目录下的一个叫做“.jshintrc”的文件中，所以我们需要在网站的根目录下面添加上这个文档，并且填写上文件内容。</p><p><img src='../image/20161003/13.png'/></p><p>还有更多的标准设置一搜一大把，我就不详述了。</p><p>第二步，加载插件。和uglify的加载方法一样。注意，这里没有先后顺序。</p><p><img src='../image/20161003/14.png'/></p><p>第三步，配置grunt命令启动时，要执行的任务，这里注意先后顺序。先检查语法先合并。</p><p><img src='../image/20161003/15.png'/></p><p>以上三步配置完了之后，我们可以测试一下这个jshint。这里我故意将当前创建的test.js文件写一个语法错误。</p><p><img src='../image/20161003/16.png'/></p><p>然后我们执行“grunt”命令。</p><p><img src='../image/20161003/17.png'/></p><p>shint很清楚的识别出了这个错误。而且jshint错误之后，后面的uglify就没有再继续执行。我们修改完这些错误，在此执行grunt命令，结果没有提示错误，而且jshint/cssmin/uglify都顺利执行了。</p><p><img src='../image/20161003/18.png'/></p><h4><span>10</span>使用csslint插件（检查css语法错误）</h4><p>csslint插件的安装配置方法和jshint几乎一模一样。只不过csslint依赖于一个叫做“.csslintrc”的文件作为语法检验的规则，我的“.csslintrc”文件如下。其他内容我就不详述了。</p><p><img src='../image/20161003/19.png'/></p><p><img src='../image/20161003/20.png'/></p><h4><span>11</span>使用watch插件（真正实现自动化）</h4><p>上面将的插件中，每次执行插件功能，都要执行一遍“grunt”，这样的操作hin浪费时间，说好的“自动化”呢？接下来搬来我们的救星--watch插件。</p><p>首先安装watch插件</p><p><img src='../image/20161003/21.png'/></p><p>第一步。配置watch将监控哪些文件的变化，以及这些文件一旦变化，要立即执行哪些插件功能。如下，watch将监控src文件夹下所有js文件和css文件的变化，一旦变化，则立即执行jshint和uglify两个插件功能。</p><p><img src='../image/20161003/22.png'/></p><p>第二步</p><p><img src='../image/20161003/23.png'/></p><p>第三步</p><p><img src='../image/20161003/24.png'/></p><p>运行grunt命令，控制台提示watch已经开始监听。此时要想停止，按ctrl + c即可。</p><p><img src='../image/20161003/25.png'/></p><p>既然在监听，我们试一试看监听有没有效。我们将 test.js 代码中去掉一个分号，看它能否自动检查出来这个错误。显然，watch检查到了test.js文件的变化，而且通过执行jshint提示了语法错误。更重要的是，它现在还在监听、并未停止。说明它正在等着你去修改错误，重新监听检查。</p><p><img src='../image/20161003/27.png'/></p><p>它又检测到了文件变化，这次语法没有错误，它很顺利的执行了jshint和uglify，执行完毕之后重新进行监听。</p><h4><span>12</span>批量安装插件</h4><p>对于“node_modules”文件，我们在上传代码到开发库的时候，是不会把“node_modules”中的内容也上传的。为什么这样呢？如果不上传，其他的开发人员，怎么得到这些grunt插件和工具呢？如果让他们自己去手动去安装，而且我当时安装的是旧版本，而他们现在自己安装的可能是新版本，新旧有可能会不兼容。</p><p>所以我们必须把package.json上传上去，因为package.json中的“devDependencies”就记录了这个系统的开发依赖项，然后其他开发人员通过nodejs的npm即可批量安装。</p><p>让我们试验一下。在D盘下面新建一个目录“grunt_test_1”，然后把“grunt_test”中的package.json拷过去。在打开命令行跳转到“grunt_test_1”，执行“npm install”命令。</p><p><img src='../image/20161003/28.png'/></p><p><img src='../image/20161003/29.png'/></p><p>此时按回车执行命令，结果在“grunt_test_1”生成了“node_modules”文件夹，里面安装好了package.json中“devDependencies”配置的插件。而且，版本都是一致的。　</p><p><img src='../image/20161003/30.png'/></p><h4></h4><p>好啦~Grunt的工具的介绍就到这里了，有什么问题大家可以在微信里问我哦~</p><p>小伙伴们早些休息~不管放假还是上班都要注意身体哦~</p><p><img src='../image/20161003/42.jpg'/></p><p></p></div>"
},
"error":"Success",
"status":"SUCESS"
}