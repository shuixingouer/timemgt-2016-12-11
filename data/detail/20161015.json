{"code":200,
"data":{
  "title":"React（一） - 前端框架",
  "id":"20161015",
  "author":"宅女",
  "time":"2016-10-15",
  "type":"3",
  "body":"<div class='items_3'><p class='ta_c'>小伙伴们好~<br/>等候了许久，翘首以盼的周六~<br/>来啦~</p><p><img src='../image/20161015/1.gif'/></p><p><br/></p><p class='ta_c'>今天跟着宅女一起来了解<br/>前端最火的框架<br/>-<br/>React</p><hr/><h4><span>一</span>为什么React这么火，选择React的原因：</h4><p><span>1</span>简单易学，上手快<br/><span>2</span>JSX使编程更简单<br/><span>3</span>组件化编程方式好处多<br/><span>4</span>虚拟Dom技术，使得开发简单，而页面性能又好<br/><span>5</span>前后端同构, 搜索引擎更友好<br/><span>6</span>强大的开发工具<br/><span>7</span>社区强大</p><h4><span>二</span>React 安装</h4><p>React 可以直接下载使用，官网 http://facebook.github.io/react/</p><h4><span>三</span>React 的网页HTML 模板</h4><p>结构大致如下：</p><pre>&lt;!DOCTYPE html&gt;<br/>&lt;html&gt;<br/>&lt;head&gt;<br/>&lt;script src='react.min.js'&gt;&lt;/script&gt;<br/>&lt;script src='react-dom.min.js'&gt;&lt;/script&gt;<br/>&lt;script src='browser.min.js'&gt;&lt;/script&gt;<br/>&lt;/head&gt;<br/>&lt;body&gt;<br/>&lt;div id='example'&gt;&lt;/div&gt;<br/>&lt;script type='text/babel'&gt;<br/>// ** react的代码写在这里 **<br/>&lt;/script&gt;<br/>&lt;/body&gt;<br/>&lt;/html&gt;</pre><p>注意：<span>1</span>最后一个 &lt;script&gt; 标签的 type 属性为 text/babel。如果需要使用 JSX，则 &lt;script&gt; 标签的 type 属性需要设置为 text/babel。这是因为 React 独有的 JSX 语法，跟 JavaScript 不兼容。<span>2</span>react.min.js 是 React 的核心库；react-dom.min.js 是提供与 DOM 相关的功能；Browser.min.js 的作用是将 JSX 语法转为 JavaScript 语法，这一步很消耗时间，实际上线的时候，应该将它放到服务器完成。</p><h4><span>四</span>ReactDOM.render()</h4><p>React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。</p><pre>ReactDOM.render(<br/>&lt;h1&gt;Hello, world!&lt;/h1&gt;,<br/>document.getElementById('example')<br/>);</pre><p>上面代码将一个 h1 标题，插入id='example'节点</p><h4><span>五</span>JSX 语法</h4><p>React 使用 JSX 来替代常规的 JavaScript。<br/>HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。<br/>我们不需要一定使用 JSX，但它有以下优点：<br/>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。<br/>它是类型安全的，在编译过程中就能发现错误。<br/>使用 JSX 编写模板更加简单快速。</p><p><span>1</span>嵌套多个 HTML 标签，需要使用一个 div 元素包裹</p><pre>ReactDOM.render(<br/>&lt;div&gt;<br/>&lt;h1&gt;前端宅女&lt;/h1&gt;<br/>&lt;h2&gt;欢迎学习 React&lt;/h2&gt;<br/>&lt;p data-myattribute = 'somevalue'&lt;这是一个很不错的 JavaScript 库!&lt;/p&gt;<br/>&lt;/div&gt;,<br/>document.getElementById('example')<br/>);</pre><p>在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。</p><p><span>2</span>JavaScript 表达式</p><p>在 JSX 中使用花括号 {} 写入 JavaScript 表达式</p><pre>ReactDOM.render(<br/>&lt;div&gt;<br/>&lt;h1&gt;{1+1}&lt;/h1&gt;<br/>&lt;/div&gt;,<br/>document.getElementById('example')<br/>);</pre><p>在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。</p><pre>ReactDOM.render(<br/>&lt;div&gt;<br/>&lt;h1&gt;{i == 1 ? 'True!' : 'False'}&lt;/h1&gt;<br/>&lt;/div&gt;,<br/>document.getElementById('example')<br/>);</pre><p>如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.</p><p><span>3</span>样式</p><p>React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。camelCase 语法：将形如background-color转化为驼峰表示法：backgroundColor。此函数在jQuery的data函数，以及涉及到css的诸多函数中都有用到。</p><pre>var myStyle = {<br/>fontSize: 100,<br/>color: '#FF0000'<br/>};<br/>ReactDOM.render(<br/>&lt;h1 style = {myStyle}&gt;前端宅女&lt;/h1&gt;,<br/>document.getElementById('example')<br/>);</pre><p>为 h1 元素添加 myStyle 内联样式。</p><p><span>4</span> 注释</p><p>注释需要写在花括号中</p><pre>ReactDOM.render(<br/>&lt;div&gt;<br/>&lt;h1&gt;前端宅女&lt;/h1&gt;<br/>{/*注释...*/}<br/>&lt;/div&gt;,<br/>document.getElementById('example')<br/>);</pre><p><span>5</span>数组</p><p>JSX 允许在模板中插入数组，数组会自动展开所有成员</p><pre>var arr = [<br/>&lt;h1&gt;前端宅女&lt;/h1&gt;,<br/>&lt;h2&gt;学的不仅是技术，更是梦想！&lt;/h2&gt;,<br/>];<br/>ReactDOM.render(<br/>&lt;div&gt;{arr}&lt;/div&gt;,<br/>document.getElementById('example')<br/>);</pre><p><span>6</span>独立文件</p><p>React JSX 代码可以放在一个独立文件上，如下：</p><p>helloworld_react.js里面内容：</p><pre>ReactDOM.render(<br/>&lt;h1&gt;Hello, world!&lt;/h1&gt;,<br/>document.getElementById('example')<br/>);</pre><p>然后在 HTML 文件中引入该 JS 文件</p><pre>&lt;body&gt;<br/>&lt;div id='example'&gt;&lt;/div&gt;<br/>&lt;script type='text/babel' src='helloworld_react.js'&gt;&lt;/script&gt;<br/>&lt;/body&gt;<br/></pre><h4><span>六</span>组件</h4><p>React 允许将代码封装成组件（component），然后像插入普通 HTML 标签一样，在网页中插入这个组件。</p><p><span>1</span>React.createClass 方法用于生成一个组件类。</p><pre>var HelloMessage = React.createClass({<br/>render: function() {<br/>return &lt;h1&gt;Hello World！&lt;/h1&gt;<br/>;<br/>}<br/>});<br/>ReactDOM.render(<br/>&lt;HelloMessage /&gt;,<br/>document.getElementById('example')<br/>);</pre><p>React.createClass 方法用于生成一个组件类 HelloMessage。<br/>&lt;HelloMessage /&gt;<br/> 实例组件类并输出信息。</p><p>注意，原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。除此之外还需要注意组件类只能包含一个顶层标签，否则也会报错。</p><pre>var HelloMessage = React.createClass({<br/>render: function() {<br/>return &lt;h1&gt;Hello {this.props.name}&lt;/h1&gt;<br/>&lt;p&gt;some text&lt;/p&gt;;<br/>}<br/>});</pre><p>上面代码会报错，因为HelloMessage组件包含了两个顶层标签：h1和p。</p><p><span>2</span> 组件可以任意加入属性</p><pre>var HelloMessage = React.createClass({<br/>render: function() {<br/>return &lt;h1&gt;Hello {this.props.name}&lt;/h1&gt;;<br/>}<br/>});<br/>ReactDOM.render(<br/>&lt;HelloMessage name='John' /&gt;,<br/>document.getElementById('example')<br/>);</pre><p>&lt;HelloMessage name='John'&gt;<br/>，就是 HelloMessage 组件加入一个 name 属性，值为 John。组件的属性可以在组件类的 this.props 对象上获取，比如 name 属性就可以通过 this.props.name 读取。</p><p>注意，在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</p><p><span>3</span>复合组件</p><p>我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。</p><pre>var WebSite = React.createClass({<br/>render: function() {<br/>return (<br/>&lt;div&gt;<br/>&lt;Name name={this.props.name} /&gt;<br/>&lt;Link site={this.props.site} /&gt;<br/>&lt;/div&gt;);<br/>}<br/>});<br/>var Name = React.createClass({<br/>render: function() {<br/>return (<br/>&lt;h1&gt;{this.props.name}&lt;/h1&gt;<br/>);<br/>}<br/>});<br/>var Link = React.createClass({<br/>render: function() {<br/>return (&lt;a href={this.props.site}&gt;<br/>{this.props.site}&lt;/a&gt;<br/>);<br/>}<br/>});<br/>React.render(<br/>&lt;WebSite name='前端宅女' site='http://www.timemgt.com.cn/qdzn/view/index.html'/&gt;,<br/>document.getElementById('example')<br/>);</pre><p>WebSite 组件使用了 Name 和 Link 组件来输出对应的信息，也就是说 WebSite 拥有 Name 和 Link 的实例</p><hr/><p>是不是相当的容易理解~</p><p><img src='../image/20161015/2.jpg'/></p><br/></div>"
},
"error":"Success",
"status":"SUCESS"
}